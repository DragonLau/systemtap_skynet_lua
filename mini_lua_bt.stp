probe begin {
}

global quit = 0;
global stack_trace;

probe process(@1).function("luaL_*"),
	process(@1).function("lua_*")
{
	if (@defined($L) && !quit) {
		LL = $L
        p = @cast(LL,"lua_State",@1)->ci
        stack = ""

        while (p != 0 && !quit) {
			func = @cast(p,"CallInfo",@1)->func
			val = &@cast(func,"StackValue",@1)->val
			value_ = &@cast(val,"TValue",@1)->value_
			tt = @cast(val,"TValue",@1)->tt_
			tt = tt	& 0x3f
			if ( tt == 0x06 ) {
				gc = @cast(value_,"Value",@1)->gc
				closure = &@cast(gc, "GCUnion", @1)->cl
				lua_closure = &@cast(closure,"Closure",@1)->l
				proto = @cast(lua_closure,"LClosure",@1)->p
				source = @cast(proto,"Proto",@1)->source
				lineinfo = @cast(proto,"Proto",@1)->lineinfo
				line_index = p->u->l->savedpc - proto->code

				filename = user_string(source->contents)
				ci = p
				f = proto

				basepc = 0
				baseline = 0
				MAXIWTHABS = 128
				ABSLINEINFO = -0x80
				pc = line_index/4 - 1
				if(@cast(f,"Proto",@1)->lineinfo == 0){
					lineno = -1;
				}
				else{
					sizeabslineinfo = @cast(f,"Proto",@1)->sizeabslineinfo
					if (sizeabslineinfo == 0 ) {
						basepc = -1;  /* start from the beginning */
						baseline = @cast(f,"Proto",@1)->linedefined;
					}
					else{
						abslineinfo = @cast(f,"Proto",@1)->abslineinfo
						abslineinfo_0 = &@cast(abslineinfo,"AbsLineInfo",@1)[0]


						if(pc < @cast(abslineinfo_0,"AbsLineInfo",@1)->pc){
							basepc = -1;  /* start from the beginning */
							baseline = @cast(f,"Proto",@1)->linedefined;

						}
						else {
							pcc = @cast(pc,"unsigned int")
							i = pcc / MAXIWTHABS - 1;  /* get an estimate */
							while (i + 1 < @cast(f,"Proto",@1)->sizeabslineinfo){
								abslineinfo_1 = &@cast(abslineinfo,"AbsLineInfo",@1)[i+1]
								if(pc < @cast(abslineinfo_1,"AbsLineInfo",@1)->pc){
									break;
								}
								i=i+1;  /* low estimate; adjust it */
							}
							abslineinfo_i = &@cast(abslineinfo,"AbsLineInfo",@1)[i]
							basepc = @cast(abslineinfo_i,"AbsLineInfo",@1)->pc
							baseline = @cast(abslineinfo_i,"AbsLineInfo",@1)->line;
						}
					}
					while (basepc++ < pc) {  /* walk until given instruction */
						lineinfo = @cast(f,"Proto",@1)->lineinfo
						tmp = @cast(lineinfo,"ls_byte",@1)[basepc]
						baseline = baseline + tmp  /* correct line */
					}
					lineno = baseline;
				}

				frame = sprintf("%s:%d", filename, lineno)
			}
			else if ( tt == 0x16 ) {
				f = p->func->val->value_->f
				frame = "light_c_function:" . usymname(f)
			}
			else if ( tt == 0x26 ) {
				gc = p->func->val->value_->gc
				f = &@cast(gc, "GCUnion", @1)->cl->c->f
				frame = "c_function:" . usymname(f)
			}
			else{
				frame = ""
			}
			p = p->previous
			if (frame != "nil") {
				if (stack == "") {
					stack = frame
				}
				else {
					stack = frame . ";" . stack
				}
			}
		}
		if (stack != "") {
			stack_trace[stack]++
		}
	}
}

probe timer.s(10) {
	warn("Quiting now\\n")
	quit = 1;
	exit()
}

probe end{
	foreach (stack+ in stack_trace)
	printf("%s %8d\n", stack, stack_trace[stack])
}
